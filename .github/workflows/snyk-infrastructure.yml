name: pipeline

on:
  push:
    branches:
      - develop
      - release
      - main

jobs:
  analyze:
    name: CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  unit-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Run Tests
      run: mvn test  

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2.11.0

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"    

    - name: Upload JaCoCo coverage report
      uses: actions/upload-artifact@v2
      with:
        name: jacoco-report
        path: target/site/jacoco/

  code-analysis:
    runs-on: ubuntu-latest
    needs: unit-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: 17

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=devopsfiap_devopsimpacta

  build:
    runs-on: ubuntu-latest
    needs: code-analysis

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Package
      run: mvn package  

  deploy-STG:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: stg
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to STG
      shell: bash
      run: |
        echo "Deploy STG"

  smoketest:
    runs-on: ubuntu-latest
    needs: deploy-STG
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Smoketest
      shell: bash
      run: |
        sh 'src/main/scripts/smoketest.sh'

  integrated-tests:
    runs-on: ubuntu-latest
    needs: smoketest
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Integrated Tests
      shell: bash
      run: |
        sh 'src/main/scripts/testeIntegrado.sh'

  deploy-Pre:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'
    environment:
      name: pre

    steps:
    - name: Deploy to PRE
      shell: bash
      run: |
        echo "Deploy PRE"

  smoketestPre:
    runs-on: ubuntu-latest
    needs: deploy-Pre
    if: github.ref == 'refs/heads/release'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Smoketest
      shell: bash
      run: |
        sh 'src/main/scripts/smoketest.sh'

  functional-tests:
    runs-on: ubuntu-latest
    needs: smoketestPre
    if: github.ref == 'refs/heads/release'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Functional Tests
      shell: bash
      run: |
        sh 'src/main/scripts/testesFuncionais.sh'

  deploy-Prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod

    steps:
    - name: Deploy to PROD
      shell: bash
      run: |
        echo "Deploy PROD"
